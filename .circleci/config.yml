version: 2.1

parameters:

  trigger:
    type: boolean
    default: true

  backend:
    type: boolean
    default: false

  frontend:
    type: boolean
    default: false

jobs:

  check-folder:
    docker:
      - image: circleci/node
    steps:
      - checkout
      - run:
          name: Trigger Workflows
          # The shell script requires an environment variable - CIRCLE_TOKEN.
          # The CIRCLE_TOKEN value should correspond to a manually created
          # Personal API Token in CircleCI. The Personal API Token is mandatory
          # since it has write permissions.
          command: chmod +x ./circle_trigger.sh && ./circle_trigger.sh


  build_frontend:
    working_directory: ~/project/packages/frontend/app
    docker:
      - image: circleci/node
    steps:
      - checkout:
          path: ~/project
      - restore_cache:
          key: yarn-dependency-cache-({ checksum "yarn.lock" })
      - run:
          name: Install Dependencies
          command: yarn
      - save_cache:
          key: yarn-dependency-cache-({ checksum "yarn.lock" })
          paths: "node_modules"
      - run:
          name: Run Yarn CI Tests
          command: yarn test:ci
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            cd .. && docker build -t codurance/open-space:${CIRCLE_SHA1} .
            docker tag codurance/open-space:${CIRCLE_SHA1} codurance/open-space:latest
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
              echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER_NAME" --password-stdin
              docker push codurance/open-space:${CIRCLE_SHA1}
              docker push codurance/open-space:latest

  build_backend:
    working_directory: ~/project/packages/backend
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Build and Run Test
          command: ./gradlew test
      - run:
          name: Generate Dockerfile
          command: ./gradlew dockerCreateDockerfile
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
              cd build/docker && docker build -t codurance/open-space-backend:${CIRCLE_SHA1} .
              docker tag codurance/open-space-backend:${CIRCLE_SHA1} codurance/open-space-backend:latest
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
              echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER_NAME" --password-stdin
              docker push codurance/open-space-backend:${CIRCLE_SHA1}
              docker push codurance/open-space-backend:latest

  deploy_frontend:
    docker:
      - image: hashicorp/terraform
    working_directory: ~/project/terraform
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Deploy
          command: env TF_VAR_app_image=codurance/open-space:${CIRCLE_SHA1} terraform apply -auto-approve

  deploy_backend:
    docker:
      - image: hashicorp/terraform
    working_directory: ~/project/terraform
    steps:
      - checkout:
          path: ~/project
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Deploy
          command: env TF_VAR_app_backend_image=codurance/open-space-backend:${CIRCLE_SHA1} terraform apply -auto-approve

workflows:
  version: 2

  # The main workflow responsible for triggering all other workflows
  # in which changes are detected.
  ci:
    when: << pipeline.parameters.trigger >>
    jobs:
      - check-folder

  build-frontend:
    when: << pipeline.parameters.frontend >>
    jobs:
      - build_frontend
      - deploy_frontend:
          filters:
            branches:
              only: master
          requires:
            - build_frontend
            
  build-backend:
    when: << pipeline.parameters.backend >>
    jobs:
      - build_backend
      - deploy_backend:
          filters:
            branches:
              only: master
          requires:
            - build_backend
